毎度毎度エロゲーに関係なくて申し訳ないのですが、
実は昔から一度作ってみたかったものに麻雀ゲームというのがあるのですよ。


正確に言えば、ゲームそのものを作りたいのではなく、ただ単に役判定やテンパイ判定部分を自分で作ってみたかったというものです。
これは学生時代に一度作ろうとしたのですが、まあうまくいきませんでしたね。
それっきり麻雀プログラムに手を出すことはなかったのですが…

昨今の事情により休日も家にいる時間が増えたので、ちょいと思い立って再び挑戦してみることにしました。

で、わりとガチで考えてみました。

（ここから先は、麻雀のルールを知っているという前提で進めていきます）


麻雀の役の形は基本的に４面子１雀頭で、例外として国士無双と七対子がありますよね。
なので最初に例外形である国士無双と七対子が成立しているか調べます。

まず国士無双ですが、これは他のどの役とも複合しない（天和などの特殊パターンを除く）ので、
真っ先に調べて、国士が成立していればその時点で役を確定させます。

次に七対子の形になっている場合ですが、一見七対子のようでいて実は字一色や二盃口が成立している可能性もありますし、
さらに清一色や混一色、タンヤオなどと複合しますよね、

	例えば
	【東東南南西西北北白白發發中中】
	は七対子の形になっていますが、これを七対子２ハンにされたら暴動が起きますよ。


というわけで、暴動を防ぐためにも「七対子の形になっているかどうか」の結果に関係なく、
続けて４面子１雀頭が成立しているかも調べます。


この４面子１雀頭についてのチェックが一番面倒なのですが、
今回は再帰検索を使って可能な組み合わせを全て列挙する方法を取りました。


まず手牌が理牌（ソート）されているという前提で、次のように処理を進めていきます

==================================================================================

※関数の外側に面子スタックを用意する（このスタックには刻子、順子、対子が入る）
※関数は引数として「ソート済みの牌配列」を取る。初期呼び出しでは１４個指定する

１．牌配列が空っぽなら…
　　→面子スタックの内容を見る。
　　スタックに４面子１雀頭存在していれば、最初の関数呼び出しで指定した手牌（１４牌）はアガリの形になっている
　　この結果を記録して Return する

２．最も左の牌を使った刻子が存在するなら…
　　→その刻子を取り除いてスタックにPushする。
　　・短くなった手牌を引数にして、再帰呼び出しを行う
　　・スタックをPopする

３．最も左の牌を使った順子が存在するなら…
　　→その刻子を取り除いてスタックにPushする。
　　・短くなった手牌を引数にして、再帰呼び出しを行う
　　・スタックをPopする

４．まだスタックに対子が入っていないなら…（つまり、まだ雀頭を見つけていないなら）
　　　　最も左の牌を使った対子が存在するなら…
　　　　→その対子を取り除いてスタックにPushする
　　　　・短くなった手牌を引数にして、再帰呼び出しを行う
　　　　・スタックをPopする
　　　　
５．Return する

==================================================================================

この関数を呼び出して戻ってきたときには、この１４牌を４面子１雀頭の形に分割するときの
全ての組み合わせが列挙されている事になります。


ところでこれは１４牌を使って「４面子１雀頭の形になる組み合わせ列挙する」やり方なので、
１３牌だけを使ってテンパイチェックするということができません（余り牌を許容しないアルゴリズムなので）

その場合は少し処理を追加して次のようにします




==================================================================================

※関数の外側に面子スタックを用意する（このスタックには刻子、順子、対子が入る）
※関数の外側に余り牌スタックを用意する
※関数は引数として「ソート済みの牌配列」を取る。初期呼び出しでは１３個指定する

１．牌配列が空っぽ？
　　　　→面子スタックの内容を見る。
　　　　・スタックに４面子０雀頭が入ってる？
　　　　　　→余り牌スタックに牌が１個入っているはず。その牌で単騎待ちテンパイである。
　　　　　　・この結果を記録して Return する
　　　　　　
　　　　・スタックに３面子１雀頭が入ってる？
　　　　　　→余り牌スタックに牌が２個入っているはず。
　　　　　　　その２牌がどんな組み合わせになっているかを調べる
　　　　　　　
　　　　　　・余り牌スタックの２牌が同じ？（対子）
　　　　　　　　→その２牌と、スタックにある雀頭牌でのシャンポン待ちテンパイである。
　　　　　　　　・この結果を記録して Return する
　　　　　　　　
　　　　　　・余り牌スタックの２牌が数字牌かつ隣同士か？（辺張 or 両面塔子）
　　　　　　　　→その２牌の隣の牌による辺張 or 両面待ちテンパイである。
　　　　　　　　・この結果を記録して Return する
　　　　　　　　
　　　　　　　　
　　　　　　・余り牌スタックの２牌が数字牌かつ１個飛ばしか？（嵌張塔子）
　　　　　　　　→その２牌に挟まれた牌による嵌張待ちテンパイである
　　　　　　　　・この結果を記録して Return する
　　　　　　　　
　　　　　　・ここまで処理が来たら、余った２牌は塔子になっていない。つまりテンパイしていない
　　　　　　　余った２牌のどちらかに別の牌がくっつけばテンパイになるので、イーシャンテン状態である
　　　　　　　この結果を記録して Return する
　　　　　　　　
２．最も左の牌を使った刻子が存在する？
　　　　→その刻子を取り除いてスタックにPushする。
　　　　・短くなった手牌を引数にして、再帰呼び出しを行う（手順１に戻る）
　　　　・スタックをPopする

３．最も左の牌を使った順子が存在する？
　　　　→その刻子を取り除いてスタックにPushする。
　　　　・短くなった手牌を引数にして、再帰呼び出しを行う（手順１に戻る）
　　　　・スタックをPopする
　　　　
　　　　※補足
　　　　　例えば「１１１２２３４９９…」と並んでいた場合、
　　　　　一番左の１を使った順子１２３をチェックする。
　　　　　１，２，３がそれぞれ１個以上が存在するので、
　　　　　それらを取り除くと残った配列は「１１２４９９…」になる


４．まだスタックに対子が入っていない？（まだ雀頭を見つけていない？）
　　　　最も左の牌を使った対子が存在するなら…
　　　　→その対子を取り除いてスタックにPushする
　　　　・短くなった手牌を引数にして、再帰呼び出しを行う（手順１に戻る）
　　　　・スタックをPopする
　　　　
５．一番左にある牌を余り牌として取り除き、余り牌スタックにPushする
　　・短くなった手牌を引数にして、再帰呼び出しを行う（手順１に戻る）
　　・余り牌スタックをPopする

６．Return する

==================================================================================

以上の処理がすべて終わって呼び出し元に戻ってきたとき、テンパイしているならその待ち牌がすべて記録されています。
待ち牌が全く記録されていなければテンパイならず、ということです。



★細かい話ここまで★


うーん、なんだかわかりにくいような…
再帰を含むプログラムって、すごく説明しづらいですね。
参考として、判定テスト用の実行ファイルと、判定部分のソースコードを付けておきます
（ついでにテンパイ＆シャンテン数、待ち、鳴きの有無、役の判定、点数計算もつけておきました。あんまり動作テストしてないですけど）
（※カンは未実装）

有料支援者向けには、ImGuiによるGUI実装や Win32+Direct3D9 を使った実装部分なども含めた完全なソースコードを付けておきます。
単なるImGuiのサンプルとしても使えると思います。
例によって、完全な自己責任の元で改変コピー配布なんでも自由ですが、ImGuiの部分だけは ImGUi のライセンスに従ってください
（ImGui については https://github.com/ocornut/imgui を参照してください）



はたしてこのプログラムが役に立つ時が来るのだろうか…？
数独のときと同じく、いつかエロゲーのミニゲームとして実装することがあるかもしれません（いや、ないか）




