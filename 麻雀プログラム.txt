本当にエロゲー関係なくて申し訳ないのですが、実は昔から一度作ってみたかったものに麻雀ゲームというのがあるんですよ。

正確に言えば、ゲームを作りたいのではなくて役判定やテンパイ判定を自力で作ってみたかったというものです。
学生時代に一度作ろうとして失敗し、それっきりになっていたのですが…

家にいる時間も増えてきたので、ちょと思い立って再び挑戦してみることにしました。

麻雀の役判定は組み合わせがたくさんあり、難易度の高いものですが（特に清一色形なんかだと人間でも待ちが良くわからない）
いろいろ試してみたっ結果、小細工したりしないで素直に全パターン調べる、という結論に達しました。


で、役を判定するにはその前段階として、手牌がどのような面子で構成されているのかを調べなければなりません。
というわけで今回はこの部分を作ってみました。


麻雀の役の形は基本的に４面子１雀頭で、例外として国士無双と七対子がありますよね。
なのでまず最初に例外形である国士無双と七対子が成立しているか調べます。

国士無双はほかのどの役とも複合しないので、国士が成立していればその時点で役が確定します。
七対子の形になっている場合は、実は字一色や二盃口が成立している可能性もありますし、清一色や混一色、タンヤオなどと複合しますのでまだ確定できません


	例えば
	【東東南南西西北北白白發發中中】
	は七対子の形になっていますが、これを七対子２ハンにされたら暴動が起きますよ。


というわけで、暴動を防ぐためにも七対子とは別に４面子１雀頭が成立しているかも調べます。
この部分がいちばん面倒なのですが、今回は再帰検索を使って可能な組み合わせを全て列挙する方法を取りました。



※ここから細かい話が続くので、面倒な場合は下までスクロールしちゃってください



★以下細かい話★




まず１４個の牌が並んでいるとして、そこから刻子、順子、対子、の順で見つかったものを取り除いていきます（とりあえず槓子に関しては考えない）
例えば清一色の形で

【１２３４４５６６７７８９９９】

とあるとして（常にソートされているものとする）最も左にある牌をチェックし、
その牌が刻子または対子になっているか、またはその牌で始まる順子があるか調べます
今回、一番左は１なので、１１１→１２３→１１の順で組み合わせを探します
１２３が存在しますからそれを取り除くと

【４４５６６７７８９９９】→１２３

になりますよね。
今度は一番左が４なので、４４４→４５６→４４の順で探します。４５６があるので取り除くと

【４６７７８９９９】→１２３・４５６

になります。
また一番左が４なので、４４４→４５６→４４の順で探しますが、みつからないので、この４を余り牌として取り除きます

【６７７８９９９】→１２３・４５６・４

一番左が６ですから６６６→６７８→９９の順で探しますす。６７８があるので取り除くと

【７９９９】→１２３・４５６・４・６７８

一番左が７なので７７７→７８９→７７を探しますが、みつからないので、この７を余り牌として取り除きます

【９９９】→１２３・４５６・４・６７８・７

一番左が９なので９９９→９９を探します（９から始まる順子は存在しないので無視する）。９９９が見つかったのでこれを取り除きます

【】→１２３・４５６・４・６７８・７・９９９

これで終わりです。今回調べた組み合わせでは余り牌が４，７と２個でたのでアガリ系にはなっていません。
今回は常に刻子、順子、対子の順で組み合わせを見てきましたが、実際にはさらに
刻子を無視して順子を調べた場合、順子を無視して対子を調べた場合もすべて列挙します。
そうすると、

【１２３４４５６６７７８９９９】
ここから１１１、１２３、１１を探す。１２３が存在する

【４４５６６７７８９９９】→１２３
ここから４４４，４５６，４４を探す。４５６，４４が存在する

■４５６を取った場合

　　　　【４６７７８９９９】→１２３，４５６
　　　　ここから４４４，４５６，４４を探す。見つからないので４を余り牌にする

　　　　【６７７８９９９】→１２３、４５６、４
　　　　ここから６６６，６７８，６６を探す。６７８が存在する

　　　　【７９９９】→１２３、４５６、４，６７８
　　　　ここから７７７，７８９，７７を探す。見つからないので７を余り牌にする

　　　　【９９９】→１２３、４５６、４，６７８、７
　　　　ここから９９９，９９を探す。９９９，９９が存在する

　　　　■９９９を取った場合
　　　　　　【】→１２３、４５６、４，６７８、７、９９９
　　　　　　★終了
			
			
　　　　■９９を取った場合
　　　　　　【９】→１２３、４５６、４，６７８、７、９９
　　　　　　ここからは面子も対子も取れない。９を余り牌にする

　　　　　　【】→１２３、４５６、４，６７８、７、９９、９
　　　　　　★終了

■４４を取った場合

　　　　【５６６７７８９９９】→１２３、４４
　　　　ここから５５５，５６７を探す（すでに頭候補を取ったので、５５は探さない）。５６７が存在する
	
　　　　【６７８９９９】→１２３、４４、５６７
　　　　ここから６６６，６７８を探す（すでに頭候補を取ったので、６６は探さない）。６７８が存在する

　　　　【９９９】→１２３、４４、５６７、６７８
　　　　ここから９９９を探す（すでに頭候補を取ったので、９９は探さない）。９９９が存在する

　　　　【】→１２３、４４、５６７、６７８、９９９
　　　　★終了


このようにすると、【１２３４４５６６７７８９９９】からは３パターンの取り方ができて、
そのうち余り牌が全くでないので最後のパターン

１２３、４４、５６７、６７８、９９９

だけになります。疑似プログラムにするとこんな感じ

	// tiles に牌の配列をセットし、Eval(tiles) のようにして呼び出す。
	// 上がっているなら 「アガリ！」と表示される

	function Eval(tiles, findPair=true)
		if SizeOf(tiles) == 0 then
			// 残り牌がぴったりゼロになっていたら、４面子１雀頭がみつかったことになる
			print("あがり！")
			return
		end

		min := Min(tiles)
		if HasKoz(tiles, min) then
			RemoveKoz(tiles, min, findPair)
			Eval(tiles)
		end
		
		if HasChunz(tiles, min) then
			RemoveChunz(tiles, min, findPair)
			Eval(tiles)
		end
		
		if findPair then
			if HasPair(tiles, min) then
				RemovePair(tiles, min)
				Eval(tiles, false) // もう頭は探さなくてよい
			end
		end
	end

	function Min(tiles) // 一番左の牌を得る
		tiles がソート済みであるという前提で、先頭の要素（もっとも値の小さい牌）を返す
	end

	function HasKoz(tiles, n) // n の刻子があるか？
		if (tiles が n を3個含んでいる) then
			return true
		else
			return false
		end
	end

	function RemoveKoz(tiles, n) // n の刻子を取り除く
		tiles から n を３個取り除く
	end

	function HasChunz(tiles, n) // n から始まる順子があるか？
		if (tiles が n, n+1, n+2 を含んでいる) then
			return true
		else
			return false
		end
	end

	function RemoveChunz(tiles, n) // n から始まる順子を取り除く
		tiles から n, n+1, n+2 を取り除く
	end

	function HasPair(tiles, n) // n の対子があるか？
		if (tiles が n を２個含んでいる) then
			return true
		else
			return false
		end
	end

	function RemovePair(tiles, n) // n の対子を取り除く
		tiles から n を２個取り除く
	end




★細かい話ここまで★


うーん、なんだかわかりにくいな…
再帰を含むプログラムって、すごく説明しづらいですね。
おまけでプログラムを付けておきますから、それを参照してみてください。
ちなみに公開プログラムのほうでは役判定もつけてあります（未完成）

さらにおまけで、Win32 + Direct3D9 + ImGui で手軽に実験するためのクラス CSimpleApp もつけておきますので、
テスト用などにどうぞ。

有料支援者向けにはEXEファイルを付けておきます。パスを通したり、リンカー設定する手間が省けます





